{"version":3,"sources":["ListItem.tsx","ListGroup.tsx","util/groupBy.ts","util/query.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ListItem","props","word","className","onClick","saveWord","index","ListGroup","h2","num","items","map","item","groupBy","objects","property","propName","obj","groupedObjects","Map","object","groupName","has","set","get","push","result","Array","from","keys","sort","key","fetchBy","param","term","a","fetch","response","json","queryRyhme","querySynonym","savedWords","App","inputEl","useRef","useState","description","setDescription","saved","setSaved","outputText","setOutputText","listGroups","setListGroups","toString","replaceAll","words","grouped","length","ryhmes","null","href","InputGroup","FormControl","ref","placeholder","aria-label","aria-describedby","Button","getRyhmes","current","value","variant","getSynonym","Object","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAUeA,MAPf,SAAkBC,GAChB,OACE,+BAAKA,EAAMC,KACT,wBAAQC,UAAU,0BAA0BC,QAAS,kBAAMH,EAAMI,SAASJ,EAAMC,OAAhF,wBCHFI,EAAQ,EAmBGC,MAlBf,SAAmBN,GACjB,IAAMO,EACU,SAAdP,EAAMQ,IACJ,uCAAQR,EAAMQ,IAAd,oBAA2C,IAAdR,EAAMQ,IAAY,GAAK,IAApD,QAEA,GAEJ,OACE,qCACGD,EACD,6BACGP,EAAMS,MAAMC,KAAI,SAACC,GAAD,OACf,cAAC,EAAD,CAAUV,KAAMU,EAAKV,KAAoBG,SAAWJ,EAAMI,UAA1BC,c,QCK7BO,EAAU,SAAuBC,EAAYC,GAGxD,GAAwB,oBAAbA,EAAyB,CAClC,IAAMC,EAAWD,EACjBA,EAAY,SAACE,GAAD,OAAYA,EAAID,IAG9B,IAR8E,EAQxEE,EAAiB,IAAIC,IARmD,cASzDL,GATyD,IAS9E,2BAA8B,CAAC,IAApBM,EAAmB,QACtBC,EAAaN,EAAiBK,GAE/BF,EAAeI,IAAID,IACtBH,EAAeK,IAAIF,EAAW,IAEhCH,EAAeM,IAAIH,GAAWI,KAAKL,IAfyC,8BAmB9E,IAnB8E,EAmBxEM,EAAS,GAnB+D,cAoB5DC,MAAMC,KAAKV,EAAeW,QAAQC,QApB0B,IAoB9E,2BAA2E,CAAC,IAAjEC,EAAgE,QACzEL,EAAOK,GAAOb,EAAeM,IAAIO,IArB2C,8BAuB9E,OAAOL,GC5CHM,EAAO,uCAAG,WAAOC,EAAeC,GAAtB,eAAAC,EAAA,sEACSC,MAAM,kCAAD,OACQH,EADR,YACiBC,IAF/B,cACRG,EADQ,yBAIPA,EAASC,QAJF,2CAAH,wDAOAC,EAAU,uCAAG,WAAOL,GAAP,SAAAC,EAAA,+EAAwBH,EAAQ,UAAWE,IAA3C,2CAAH,sDAEVM,EAAY,uCAAG,WAAON,GAAP,SAAAC,EAAA,+EAAwBH,EAAQ,KAAME,IAAtC,2CAAH,sDCArBO,EAAuB,GAsFZC,MApFf,WACE,IAAMC,EAAUC,iBAAY,MADf,EAGyBC,mBACpC,qCAJW,mBAGNC,EAHM,KAGOC,EAHP,OAOaF,mBAAiB,0BAP9B,mBAONG,EAPM,KAOCC,EAPD,OAQuBJ,mBAAiB,IARxC,mBAQNK,EARM,KAQMC,EARN,OASuBN,mBAAc,MATrC,mBASNO,EATM,KASMC,EATN,KAWPhD,EAAW,SAACH,GAChBuC,EAAU,sBAAOA,GAAP,CAAmBvC,IAC7B+C,EAASR,EAAWa,WAAWC,WAAW,IAAK,QAbpC,4CAgBb,WAAyBrB,GAAzB,iBAAAC,EAAA,6DACEY,EAAe,yBAAD,OAA0Bb,EAA1B,OACdiB,EAAc,cAFhB,SAIsBZ,EAAWL,GAJjC,OAIQsB,EAJR,OAKQC,EAAU5C,EAAQ2C,EAAO,gBAE3BA,EAAME,OAAQL,EAAcI,IAE9BJ,EAAc,MACdF,EAAc,iBAVlB,4CAhBa,kEA6Bb,WAA0BjB,GAA1B,eAAAC,EAAA,6DACEY,EAAe,mCAAD,OAAoCb,EAApC,OACdiB,EAAc,cAFhB,SAIuBX,EAAaN,GAJpC,QAIQyB,EAJR,QAMaD,OAAQL,EAAc,CAAEO,KAAMD,KAEvCN,EAAc,MACdF,EAAc,iBATlB,4CA7Ba,sBA0Cb,OACE,uBAAMhD,UAAU,YAAhB,UACE,mBAAG0D,KAAK,iCAAR,+BACA,kEACA,qBAAK1D,UAAU,MAAf,SACE,sBAAKA,UAAU,MAAf,0BACe,+BAAO6C,SAGxB,eAACc,EAAA,EAAD,CAAY3D,UAAU,OAAtB,UACE,cAAC4D,EAAA,EAAD,CACEC,IAAKrB,EACLsB,YAAY,eACZC,aAAW,eACXC,mBAAiB,iBAEnB,cAACC,EAAA,EAAD,CAAQhE,QAAS,kBA1DV,2CA0DgBiE,CAAU1B,EAAS2B,QAASC,QAAnD,gCAGA,cAACH,EAAA,EAAD,CACEI,QAAQ,YACRpE,QAAS,kBA/DJ,2CA+DUqE,CAAW9B,EAAS2B,QAASC,QAF9C,8BAQF,qBAAIpE,UAAU,MAAd,cAAsB2C,KACrBM,EACGsB,OAAO7C,KAAKuB,GAAYzC,KAAI,SAACF,GAAD,OAC1B,cAAC,EAAD,CAEEA,IAAKA,EACLC,MAAO0C,EAAW3C,GAClBJ,SAAUA,GAHLI,MAMTyC,MC5EKyB,G,MAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c35389fb.chunk.js","sourcesContent":["\n\n\nfunction ListItem(props: any) {\n  return (\n    <li>{props.word}\n      <button className=\"btn btn-outline-success\" onClick={() => props.saveWord(props.word) }>(save)</button>\n    </li>\n  )\n}\nexport default ListItem\n","import ListItem from \"./ListItem\";\nimport { WordResult } from \"./util/word-result\";\n\nlet index = 0;\nfunction ListGroup(props: any) {\n  const h2 =\n    props.num !== \"null\" ? (\n      <h2>{`${props.num} Syllable${props.num === 1 ? \"\" : \"s\"}: `}</h2>\n    ) : (\n      \"\"\n    );\n  return (\n    <>\n      {h2}\n      <ul>\n        {props.items.map((item: WordResult) => (\n          <ListItem word={item.word} key={index++} saveWord={ props.saveWord }/>\n        ))}\n      </ul>\n    </>\n  );\n}\nexport default ListGroup;\n","/**\n * Returns a list of objects grouped by some property. For example:\n * groupBy([\n *     {name: 'Steve', team:'blue'},\n *     {name: 'Jack', team: 'red'},\n *     {name: 'Carol', team: 'blue'}], 'team')\n *\n * returns:\n * { 'blue': [\n *     { name: 'Steve', team: 'blue'},\n *     { name: 'Carol', team: 'blue'}\n *   ],\n *   'red': [\n *     { name: 'Jack', team: 'red'}\n *   ]\n * }\n *\n * @param {any[]} objects: An array of objects\n * @param {string|Function} property: A property to group objects by\n * @returns  An object where the keys representing group names and the values are the items in objects that are in that group\n */\nexport const groupBy = <T extends Array<any>>(objects: T, property: keyof T) => {\n  // If property is not a function, convert it to a function that accepts one argument (an object) and returns that object's\n  // value for property (obj[property])\n  if (typeof property !== \"function\") {\n    const propName = property;\n    property = ((obj: T) => obj[propName]) as any;\n  }\n\n  const groupedObjects = new Map(); // Keys: group names, value: list of items in that group\n  for (const object of objects) {\n    const groupName = (property as any)(object);\n    //Make sure that the group exists\n    if (!groupedObjects.has(groupName)) {\n      groupedObjects.set(groupName, []);\n    }\n    groupedObjects.get(groupName).push(object);\n  }\n\n  // Create an object with the results. Sort the keys so that they are in a sensible \"order\"\n  const result = {} as T;\n  for (const key of Array.from(groupedObjects.keys()).sort() as (keyof T)[]) {\n    result[key] = groupedObjects.get(key);\n  }\n  return result;\n};\n","const fetchBy = async (param: string, term: string) => {\n  const response = await fetch(\n    `https://api.datamuse.com/words?${param}=${term}`\n  );\n  return response.json();\n};\n\nexport const queryRyhme = async (term: string) => fetchBy(\"rel_rhy\", term);\n\nexport const querySynonym = async (term: string) => fetchBy(\"ml\", term);\n","import { useRef, useState } from \"react\";\nimport { FormControl } from \"react-bootstrap\";\nimport Button from \"react-bootstrap/Button\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport \"./App.css\";\nimport ListGroup from \"./ListGroup\";\nimport { groupBy } from \"./util/groupBy\";\nimport { queryRyhme, querySynonym } from \"./util/query\";\n\nlet savedWords: string[] = [];\n\nfunction App() {\n  const inputEl = useRef<any>(null);\n\n  const [description, setDescription] = useState(\n    \"Enter a term and select an action\"\n  );\n  \n  const [saved, setSaved] = useState<string>(\"(put saved words here)\");\n  const [outputText, setOutputText] = useState<string>(\"\");\n  const [listGroups, setListGroups] = useState<any>(null);\n\n  const saveWord = (word: string) => {\n    savedWords = [...savedWords, word]\n    setSaved(savedWords.toString().replaceAll(\",\", \", \"));\n  }\n\n  async function getRyhmes(term: string) {\n    setDescription(`Words that rhyme with ${term}: `);\n    setOutputText(\"...loading\");\n\n    const words = await queryRyhme(term);\n    const grouped = groupBy(words, \"numSyllables\");\n\n    if (words.length) setListGroups(grouped);\n    else {\n      setListGroups(null);\n      setOutputText(\"(no results)\");\n    }\n  }\n  async function getSynonym(term: string) {\n    setDescription(`Words with a similar meaning to ${term}: `);\n    setOutputText(\"...loading\");\n\n    const ryhmes = await querySynonym(term);\n\n    if (ryhmes.length) setListGroups({ null: ryhmes });\n    else {\n      setListGroups(null);\n      setOutputText(\"(no results)\");\n    }\n  }\n\n  return (\n    <main className=\"container\">\n      <a href=\"https://github.com/NateMay/ps6\">GitHub Repository</a>\n      <h1>Rhyme Finder (579 Problem Set 5)</h1>\n      <div className=\"row\">\n        <div className=\"col\">\n          Saved words: <span>{saved}</span>\n        </div>\n      </div>\n      <InputGroup className=\"mb-3\">\n        <FormControl\n          ref={inputEl}\n          placeholder=\"Enter a word\"\n          aria-label=\"Enter a word\"\n          aria-describedby=\"basic-addon2\"\n        />\n        <Button onClick={() => getRyhmes(inputEl!.current!.value)}>\n          Show rhyming words\n        </Button>\n        <Button\n          variant=\"secondary\"\n          onClick={() => getSynonym(inputEl!.current!.value)}\n        >\n          Show synonyms\n        </Button>\n      </InputGroup>\n\n      <h2 className=\"col\"> {description}</h2>\n      {listGroups\n        ? Object.keys(listGroups).map((num) => (\n            <ListGroup\n              key={num}\n              num={num}\n              items={listGroups[num]}\n              saveWord={saveWord}\n            />\n          ))\n        : outputText}\n    </main>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}